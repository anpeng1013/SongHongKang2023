package day08_java_dataStructure;

import org.junit.Test;

/**
 * 数据结构：
 *      就是一种程序设计优化的方法论，研究数据的逻辑结构和物理结构以及它们之间相互关系，并对这种结构定义相应的运算，目的是加快程序的
 *      执行速度、减少内存占用的空间。具体的研究对象如下：
 *      > 逻辑关系：数据的逻辑结构指反映数据元素之间的逻辑关系，而与数据的存储无关，是独立于计算机的。
 *          - 集合结构：数据结构中的元素之间除了“同属一个集合“的相互关系外，别无其他关系。集合之间没有逻辑关系。
 *          - 线性结构：数据结构中的元素存在先后顺序关系。比如：一维数组、链表、栈、队列。
 *          - 树形结构：数据结构中的元素存在一对多的关系。比如：家谱、文件系统、组织架构。
 *          - 图形结构：数据结构中存在多对多的关系。比如：全国铁路网、地铁网。
 *
 *      > 存储结构：数据的存储结构也叫物理结构，包括数据元素的表示和关系的表示。数据的存储结构是用计算机语言的。
 *          - 顺序结构：使用一组连续的存储单元依次存储逻辑上相邻的各个元素。
 *              优点：只需要申请存放数据本身的内存空间即可，支持下标访问，也可以实现随机访问。
 *              缺点：必须静态分配连续空间，内存空间的利用率比较低。插入和删除可能需要移动大量元素，效率比较低。
 *          - 链式结构：不使用连续的存储空间存放结构的元素，而是为每一个元素构造一个结点。节点中除了存放数据本身外，还需要存放指向下一个结点的指针。
 *              优点：不采用连续的存储空间导致内存空间的利用率比较高，克服顺序存储结构中预知元素个数的缺点。插入和删除元素时，不需要移动大量元素。
 *              缺点：需要额外的空间来表达元素之间的逻辑关系，不支持下标访问和随机访问。
 *          - 索引结构：在链式结构的基础上，建立附加的索引表来记录每个元素结点的地址。索引表由若干索引项（关键字：地址）组成。
 *              优点：用结点的索引号来确定结点的存储地址，实现随机访问，检索速度快。
 *              缺点：增加了附加的索引表，会占用较多的存储空间。在增加和删除数据时要修改索引表，所以会花费较多的时间。
 *          - 散列结构：根据元素的关键字直接计算出该元素的存储地址，又称为hash存储。
 *              优点：检索、增加和删除结点的操作都很快。
 *              缺点：不支持排序，一般比用线性存储需要更多的空间，并且记录的关键字不能重复。
 *
 *      > 运算结构：施加在数据上的运算包括运算的定义和实现。运算的定义是针对逻辑结构的，指出运算的功能；运算的实现是针对存储结构的，
 *                 指出运算的具体操作步骤。
 *          - 分配资源，建立结构，释放资源
 *          - 插入和删除
 *          - 获取和遍历
 *          - 修改和排序
 *
 *
 *
 * @ClassName: A_SummaryTest.java
 * @Author: anpeng
 * @Date: 2024/1/12 18:09
 */
@SuppressWarnings("all")
public class A_SummaryTest {
    @Test
    public void test01(){
        System.out.println("this is a summary");
    }

}
