package day04_java_Exception;

/**
 * 异常处理：
 *      在编写程序时，经常要在可能出现错误的地方加上检测的代码，如进行 x/y 运算时，要检测分母为0，数据为空，输入的不是数字而是字符等。
 *      过多的if-else分支会导致程序的代码加长、臃肿，可读性差，程序员需要花很大的精力“堵漏洞”。因此采用异常处理机制。
 *
 *      java异常处理：
 *          Java 采用的异常处理机制，是将异常处理的程序代码集中在一起，与正常的程序代码分开，使得程序简洁、优雅，并易于维护。
 *
 *      java异常处理方法：提供了异常处理的抓抛模型
 *          方式一[捕获异常]：try-catch-finally
 *              * 如上述，Java程序的执行过程中如出现异常，会生成一个异常类对象，该对象将被提交给Java运行时系统，这个过程称为抛出(throw)异常。
 *              * 如果一个方法内抛出异常，该对象会被抛给调用者方法去处理。如果异常没有在调用者方法中处理，它继续被抛给这个调用方法的上层方法。
 *                  这个过程将一直继续下去，直到异常被处理。这个被处理的过程称为捕获(catch)异常。
 *              * 如果一个异常被抛回到main()方法，并且main()也不处理，则程序运行终止。
 *
 *              捕获异常语法格式：
 *                  try{
 *                      ...... //可能产生异常的代码
 *                  }
 *                  catch(异常类型1 e){
 *                      ...... //当产生异常类型1的异常时的处置措施
 *                  }
 *                  catch(异常类型2 e){
 *                      ...... //当产生异常类型2的异常时的处置措施
 *                  }
 *                  finally{
 *                      ...... //无论是否发生异常，都无条件执行的语句
 *                  }
 *
 *              1、整体执行过程：当某段代码可能发生异常，不管这个异常是编译时异常（受检异常）还是运行时异常（非受检异常），我们都可以
 *              使用try语句块将它括起来，并在try语句块下面编写catch分支尝试捕获对应的异常对象。
 *                  * 如果在程序运行时，try语句块中的代码没有发生异常，那么catch所有的分支都不执行。
 *                  * 如果在程序运行时，try语句块中的代码发生了异常，根据异常对象的类型，将从上到下选择第一个匹配的catch分支执行。此时try中
 *                      发生异常的语句下面的代码将不执行，而整个try...catch之后的代码可以继续运行。
 *                  * 如果在程序运行时，try语句块中的代码发生了异常，但是所有catch分支都无法匹配（捕获）这个异常，那么JVM将会终止
 *                      当前方法的执行，并把异常对象“抛”给调用者。如果调用者都不处理，程序就挂了。
 *
 *              2、try:
 *                  捕获异常的第一步是用 try{…}语句块选定捕获异常的范围，将可能出现异常的业务逻辑代码放在try语句块中
 *
 *              3、catch(Exception e)
 *                  * catch分支有两个部分，catch()中编写异常类型和异常参数名，{}中编写如果发生了这个异常，要做什么处理的代码。
 *                  * 如果明确知道产生的是何种异常，可以用该异常类作为catch的参数；也可以用其父类作为catch的参数。
 *                      比如：可以用ArithmeticException类作为参数的地方，就可以用RuntimeException类作为参数，或者用所有异常的父类
 *                      Exception类作为参数。但不能是与ArithmeticException类无关的异常，如NullPointerException(catch中的语句将不会执行)。
 *                  * 每个try语句块可以伴随一个或多个catch语句，用于处理可能产生的不同类型的异常对象。
 *                  * 如果有多个catch分支，并且多个异常类型有父子类关系，必须保证小的子异常类型在上，大的父异常类型在下。否则，报错。
 *                  * catch 中常用异常处理的方式
 *                      public String getMessage()：获取异常的描述信息，返回字符串.
 *                      public void printStackTrace()：打印异常的跟踪栈信息并输出到控制台。包含了异常的类型、异常的原因、还包括异常
 *                      出现的位置，在开发和调试阶段，都得使用printStackTrace()。
 *
 *
 *          方式二：throws + 异常类型
 *
 *
 * @ClassName: BTryCatchAndThrowsTest.java
 * @Author: anpeng
 * @Date: 2023/11/7 14:57
 */
public class BTryCatchAndThrowsTest {
}
