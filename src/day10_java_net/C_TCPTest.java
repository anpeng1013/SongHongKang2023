package day10_java_net;

import org.junit.Test;

/**
 * @ClassName: C_TCPTest.java
 * @Author: anpeng
 * @Date: 2024/3/24 10:07
 *
 * TCP协议（传输控制协议：Transmission Control Protocol）
 *      - 总结：
 *          -- TCP协议进行通信的两个应用进程：客户端、服务端。使用TCP协议前，须先建立TCP连接，形成基于字节流的传输数据通道
 *          -- 传输前，采用“三次握手”方式，点对点通信，是可靠的。
 *          -- TCP协议使用重发机制，当一个通信实体发送一个消息给另一个通信实体后，需要收到另一个通信实体确认信息，如果没有收到另一个通信实体
 *              确认信息，则会再次重复刚才发送的消息
 *          -- 在连接中可进行大量数据的传输传输完毕，需释放已建立的连接，效率低。
 *
 *      - 三次握手：（在发送数据的准备阶段，客户端与服务器之间的三次交互，以保证连接的可靠。）
 *          -- 第一次握手，客户端向服务器端发起 TCP 连接的请求。（SYN=1，seq=x，不含数据）
 *          -- 第二次握手，服务器端发送针对客户端 TCP 连接请求的确认。（SYN=1，ACK=x+1，seq=y，不含数据）
 *          -- 第三次握手，客户端发送针对服务器端确认的确认。（ACK=y+1，seq=z，可含数据）
 *
 *      - 四次挥手：（在发送数据结束后，释放连接时需要经过四次挥手）
 *          -- 第一次挥手：客户端向服务器端提出结束连接，让服务器做最后的准备工作。此时，客户端处于半关闭状态，即表示不再向服务器发送数据了，
 *              但是还可以接受数据。（Fin=1, ACK=z, seq=x）
 *          -- 第二次挥手：服务器接收到客户端释放连接的请求后，会将最后的数据发给客户端。并告知上层的应用进程不再接收数据。（ACK=x+1, seq=m）
 *          -- 第三次挥手：服务器发送完数据后，会给客户端发送一个释放连接的报文。那么客户端接收后就知道可以正式释放连接了。（Fin=1, ACK=x+1, seq=n）
 *          -- 第四次挥手：客户端接收到服务器最后的释放连接报文后，要回复一个确认彻底断开的报文。这样服务器收到后才会彻底释放连接。这里客户端，
 *              发送完最后的报文后，会等待 2MSL，因为有可能服务器没有收到最后的报文，那么服务器迟迟没收到，就会再次给客户端发送释放连接的报文，此时客户端在
 *              等待时间范围内接收到，会重新发送最后的报文，并重新计时。如果等待 2MSL 后，没有收到，那么彻底断开。（ACK=n+1，seq=u）
 * 
 */
@SuppressWarnings("all")
public class C_TCPTest {
    @Test
    public void testTCP(){
        System.out.println("TCP网络编程的案例在测试目录test/java_bean/day10中！");
    }
    
}
